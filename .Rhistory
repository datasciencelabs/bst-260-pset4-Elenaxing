title = "Weekly COVID-19 Cases per 100,000 by Region (2020–2021)",
x = "Date",
y = "Cases per 100,000"
)
cases |>
filter(year(date) %in% c(2020, 2021)) |>  # keep only 2020 & 2021
mutate(year = year(date)) |>  # create a new column `year` by extracting year from `date`
left_join(population, by = c("state", "year")) |>  # join with `population` on both `state` and `year`
mutate(cases_per100k = (cases / population) * 100000) |>  # compute cases per 100,000 population
select(state, region_name, date, cases_per100k) |>  # select columns `state`, `region_name`, `date`, `cases_per100k`
filter(!is.na(state), !is.na(region_name), !is.na(date), !is.na(cases_per100k)) |>  # remove rows with missing values
ggplot(aes(x = date, y = cases_per100k, color = state)) +  # x-axis=date, y-axis=cases_per100k, color by state
geom_line() +  # draw lines for each state's time series
facet_wrap(~ region_name, ncol=2) +  # create separate panels for each region
labs(
title = "Weekly COVID-19 Cases per 100,000 by Region (2020–2021)",
x = "Date",
y = "Cases per 100,000"
)
cases |>
filter(year(date) %in% c(2020, 2021)) |>  # keep only 2020 & 2021
mutate(year = year(date)) |>  # create a new column `year` by extracting year from `date`
left_join(population, by = c("state", "year")) |>  # join with `population` on both `state` and `year`
mutate(cases_per100k = (cases / population) * 100000) |>  # compute cases per 100,000 population
select(state, region_name, date, cases_per100k) |>  # select columns `state`, `region_name`, `date`, `cases_per100k`
filter(!is.na(state), !is.na(region_name), !is.na(date), !is.na(cases_per100k)) |>  # remove rows with missing values
ggplot(aes(x = date, y = cases_per100k, color = state)) +  # x-axis=date, y-axis=cases_per100k, color by state
geom_line() +  # draw lines for each state's time series
facet_wrap(~ region_name, ncol=2) +  # create separate panels for each region
labs(
title = "Weekly COVID-19 Cases per 100,000 by Region (2020–2021)",
x = "Date",
y = "Cases per 100,000"
)
## Your code here
source("census-key.R")
url <- "https://api.census.gov/data/2021/pep/population"
#| message: false
#| warning: false
library(httr2)
request <- request(url) |> req_url_query(get = "POP_2020,POP_2021,NAME", `for` = "state:*", key = census_key)
#request
response <- req_perform(request)
# check the response status to make sure it is successful
resp_status(response)
# Your code here
resp_content_type(response)
#population <- resp_body_json(response) |> do.call(what = rbind)
population <- resp_body_json(response, simplifyVector = TRUE)
head(population)
#| message: false
#| warning: false
library(tidyverse)
library(janitor)
population <- population |> row_to_names(row_number = 1) |>  # Use janitor row to names function
as_tibble() |>  # convert to tibble
select(-state) |>  # remove state column
rename(state_name = NAME) |>  # rename NAME column to state_name
pivot_longer(
cols = -state_name,
names_to = "year",
values_to = "population"
) |>  # use pivot_longer to tidy
mutate(year = str_sub(year, -4), # remove POP_ from year
# parse all relevant columns to numeric
year = as.integer(year),
population = as.numeric(population),
# add state abbreviations using state.abb variable
# use case_when to add abbreviations for DC and PR
state = case_when(state_name == "District of Columbia" ~ "DC",
state_name == "Puerto Rico" ~ "PR",
TRUE ~ state.abb[match(state_name, state.name)]))
population
population |>
# reorder state by the average population across the two years
# assign aesthetic mapping
ggplot(aes(x = population,
y = reorder(state_name, population))) +
geom_col() +  # use geom_col to plot barplot
facet_wrap(~ year) +  # facet by year
labs(
x = "Population",
y = "State",
title = "US State Populations in 2020 and 2021"
)
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
#| message: false
#| warning: false
library(jsonlite)
library(purrr)
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
regions_raw <- request(url) |>
req_perform() |>
resp_check_status() |>  # check the status; stop if not 200 (error)
resp_body_string() |>  # extract the response body as a JSON string
fromJSON(simplifyDataFrame = FALSE)  # use jsonlit JSON parser
#class(regions)
# convert list to data frame. You can use map_df in purrr package
regions <- regions_raw |>
map_df(function(x){
tibble(
state_name  = x$states,       # expand each state as a row
region      = x$region,
region_name = x$region_name
)
}) |>
# change the long name of region to short name
mutate(
region_name = case_when(
region_name == "New York and New Jersey, Puerto Rico, Virgin Islands" ~ "NY/NJ/PR/VI",
TRUE ~ region_name
)
) |>
# keep rows where state_name is one of the 50 U.S. states, District of Columbia, or Puerto Rico
filter(state_name %in% c(state.name, "District of Columbia", "Puerto Rico"))
#nrow(regions)
population <- population |>
left_join(regions, by = "state_name")
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api) |>
req_perform() |>
resp_check_status() |>  # check the API response status
resp_body_json(simplifyDataFrame = TRUE)
#cases_raw
nrow(cases_raw)
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases <- request(api) |>
req_url_query(`$limit` = "10000000000") |>
req_perform() |>
resp_check_status() |>  # check the API response status
resp_body_json(simplifyDataFrame = TRUE) |>
select(state, end_date, new_cases) |>  # select columns `state`, `end_date`, and `new_cases`
rename(date = end_date,
cases = new_cases) |>  # rename column names
mutate(cases = as.numeric(cases),
date = as.Date(date))  # make sure the cases are numeric and the dates are in the `Date` ISO-8601
cases |>
filter(year(date) %in% c(2020, 2021)) |>  # keep only 2020 & 2021
mutate(year = year(date)) |>  # create a new column `year` by extracting year from `date`
left_join(population, by = c("state", "year")) |>  # join with `population` on both `state` and `year`
mutate(cases_per100k = (cases / population) * 100000) |>  # compute cases per 100,000 population
select(state, region_name, date, cases_per100k) |>  # select columns `state`, `region_name`, `date`, `cases_per100k`
filter(!is.na(state), !is.na(region_name), !is.na(date), !is.na(cases_per100k)) |>  # remove rows with missing values
ggplot(aes(x = date, y = cases_per100k, color = state)) +  # x-axis=date, y-axis=cases_per100k, color by state
geom_line() +  # draw lines for each state's time series
facet_wrap(~ region_name, ncol=2) +  # create separate panels for each region
labs(
title = "Weekly COVID-19 Cases per 100,000 by Region (2020–2021)",
x = "Date",
y = "Cases per 100,000"
)
library(lubridate)
library(knitr)
cases |>
mutate(date = ymd(date)) |>  # properly parse the `date` column
filter(year(date) %in% c(2020, 2021)) |>  # keep only 2020 & 2021
mutate(year = year(date), month = month(date, label=TRUE, abbr=FALSE)) |>  # full month name
select(year, month, cases) |>  # select columns `year`, `month`, and `cases`
group_by(year, month) |>  # group by `year` and `month`
# calculate the total number of cases for each year-month group (ignoring NAs)
summarise(total_cases = sum(cases, na.rm = TRUE),
.groups = "drop") |>  # drop all grouping
arrange(year, month) |>  # order by `year` and `month`
kable(caption = "Total COVID-19 Cases by Year and Month (2020–2021)")
deaths_url <- "https://data.cdc.gov/resource/9bhg-hcku.json"
# Your code here
deaths <- request(deaths_url) |>
req_url_query(`$limit` = "1000000000") |>
req_perform() |>
resp_check_status() |>  # check the API response status
resp_body_json(simplifyDataFrame = TRUE) |>
select(state, end_date, covid_19_deaths) |>  # select columns state, end_date, covid_19_deaths
rename(date = end_date, deaths = covid_19_deaths) |>  # rename columns
# ensure dates are in proper Date format and deaths are numeric
mutate(date = as.Date(date), deaths = as.numeric(deaths)) |>
# keep rows where state is one of the 50 U.S. states, District of Columbia, or Puerto Rico
filter(state %in% c(state.name, "District of Columbia", "Puerto Rico"))
#deaths
# Your code here
deaths |>
group_by(state) |>  # group by state
summarise(total_deaths = sum(deaths, na.rm = TRUE),  # compute the total number of cases for each state (ignoring NAs)
.groups = "drop") |>  # drop all groupings
slice_max(total_deaths, n = 10) |>  # select the top 10 states with the highest death counts
# reorder states so bars are sorted by death counts
ggplot(aes(x = total_deaths, y = reorder(state, total_deaths))) +
geom_col() +  # draw a bar chart (bars represent death counts)
labs(
title = "Top 10 States with Highest Total COVID-19 Deaths",
y = "State",
x = "Total Deaths"
)
## Your code here
source("census-key.R")
url <- "https://api.census.gov/data/2021/pep/population"
#| message: false
#| warning: false
library(httr2)
request <- request(url) |> req_url_query(get = "POP_2020,POP_2021,NAME", `for` = "state:*", key = census_key)
#request
response <- req_perform(request)
# check the response status to make sure it is successful
resp_status(response)
# Your code here
resp_content_type(response)
#population <- resp_body_json(response) |> do.call(what = rbind)
population <- resp_body_json(response, simplifyVector = TRUE)
head(population)
#| message: false
#| warning: false
library(tidyverse)
library(janitor)
population <- population |> row_to_names(row_number = 1) |>  # Use janitor row to names function
as_tibble() |>  # convert to tibble
select(-state) |>  # remove state column
rename(state_name = NAME) |>  # rename NAME column to state_name
pivot_longer(
cols = -state_name,
names_to = "year",
values_to = "population"
) |>  # use pivot_longer to tidy
mutate(year = str_sub(year, -4), # remove POP_ from year
# parse all relevant columns to numeric
year = as.integer(year),
population = as.numeric(population),
# add state abbreviations using state.abb variable
# use case_when to add abbreviations for DC and PR
state = case_when(state_name == "District of Columbia" ~ "DC",
state_name == "Puerto Rico" ~ "PR",
TRUE ~ state.abb[match(state_name, state.name)]))
population
population |>
# reorder state by the average population across the two years
# assign aesthetic mapping
ggplot(aes(x = population,
y = reorder(state_name, population))) +
geom_col() +  # use geom_col to plot barplot
facet_wrap(~ year) +  # facet by year
labs(
x = "Population",
y = "State",
title = "US State Populations in 2020 and 2021"
)
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
#| message: false
#| warning: false
library(jsonlite)
library(purrr)
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
regions_raw <- request(url) |>
req_perform() |>
resp_check_status() |>  # check the status; stop if not 200 (error)
resp_body_string() |>  # extract the response body as a JSON string
fromJSON(simplifyDataFrame = FALSE)  # use jsonlit JSON parser
#class(regions)
# convert list to data frame. You can use map_df in purrr package
regions <- regions_raw |>
map_df(function(x){
tibble(
state_name  = x$states,       # expand each state as a row
region      = x$region,
region_name = x$region_name
)
}) |>
# change the long name of region to short name
mutate(
region_name = case_when(
region_name == "New York and New Jersey, Puerto Rico, Virgin Islands" ~ "NY/NJ/PR/VI",
TRUE ~ region_name
)
) |>
# keep rows where state_name is one of the 50 U.S. states, District of Columbia, or Puerto Rico
filter(state_name %in% c(state.name, "District of Columbia", "Puerto Rico"))
#nrow(regions)
population <- population |>
left_join(regions, by = "state_name")
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api) |>
req_perform() |>
resp_check_status() |>  # check the API response status
resp_body_json(simplifyDataFrame = TRUE)
#cases_raw
nrow(cases_raw)
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases <- request(api) |>
req_url_query(`$limit` = "10000000000") |>
req_perform() |>
resp_check_status() |>  # check the API response status
resp_body_json(simplifyDataFrame = TRUE) |>
select(state, end_date, new_cases) |>  # select columns `state`, `end_date`, and `new_cases`
rename(date = end_date,
cases = new_cases) |>  # rename column names
mutate(cases = as.numeric(cases),
date = as.Date(date))  # make sure the cases are numeric and the dates are in the `Date` ISO-8601
cases |>
filter(year(date) %in% c(2020, 2021)) |>  # keep only 2020 & 2021
mutate(year = year(date)) |>  # create a new column `year` by extracting year from `date`
left_join(population, by = c("state", "year")) |>  # join with `population` on both `state` and `year`
mutate(cases_per100k = (cases / population) * 100000) |>  # compute cases per 100,000 population
select(state, region_name, date, cases_per100k) |>  # select columns `state`, `region_name`, `date`, `cases_per100k`
filter(!is.na(state), !is.na(region_name), !is.na(date), !is.na(cases_per100k)) |>  # remove rows with missing values
ggplot(aes(x = date, y = cases_per100k, color = state)) +  # x-axis=date, y-axis=cases_per100k, color by state
geom_line() +  # draw lines for each state's time series
facet_wrap(~ region_name, ncol=2) +  # create separate panels for each region
labs(
title = "Weekly COVID-19 Cases per 100,000 by Region (2020–2021)",
x = "Date",
y = "Cases per 100,000"
)
library(lubridate)
library(knitr)
cases |>
mutate(date = ymd(date)) |>  # properly parse the `date` column
filter(year(date) %in% c(2020, 2021)) |>  # keep only 2020 & 2021
mutate(year = year(date), month = month(date, label=TRUE, abbr=FALSE)) |>  # full month name
select(year, month, cases) |>  # select columns `year`, `month`, and `cases`
group_by(year, month) |>  # group by `year` and `month`
# calculate the total number of cases for each year-month group (ignoring NAs)
summarise(total_cases = sum(cases, na.rm = TRUE),
.groups = "drop") |>  # drop all grouping
arrange(year, month) |>  # order by `year` and `month`
kable(caption = "Total COVID-19 Cases by Year and Month (2020–2021)")
deaths_url <- "https://data.cdc.gov/resource/9bhg-hcku.json"
# Your code here
deaths <- request(deaths_url) |>
req_url_query(`$limit` = "1000000000") |>
req_perform() |>
resp_check_status() |>  # check the API response status
resp_body_json(simplifyDataFrame = TRUE) |>
select(state, end_date, covid_19_deaths) |>  # select columns state, end_date, covid_19_deaths
rename(date = end_date, deaths = covid_19_deaths) |>  # rename columns
# ensure dates are in proper Date format and deaths are numeric
mutate(date = as.Date(date), deaths = as.numeric(deaths)) |>
# keep rows where state is one of the 50 U.S. states, District of Columbia, or Puerto Rico
filter(state %in% c(state.name, "District of Columbia", "Puerto Rico"))
#deaths
# Your code here
deaths |>
group_by(state) |>  # group by state
summarise(total_deaths = sum(deaths, na.rm = TRUE),  # compute the total number of cases for each state (ignoring NAs)
.groups = "drop") |>  # drop all groupings
slice_max(total_deaths, n = 10) |>  # select the top 10 states with the highest death counts
# reorder states so bars are sorted by death counts
ggplot(aes(x = total_deaths, y = reorder(state, total_deaths))) +
geom_col() +  # draw a bar chart (bars represent death counts)
labs(
title = "Top 10 States with Highest Total COVID-19 Deaths",
y = "State",
x = "Total Deaths"
)
## Your code here
source("census-key.R")
url <- "https://api.census.gov/data/2021/pep/population"
#| message: false
#| warning: false
library(httr2)
request <- request(url) |>
req_url_query(
get = "POP_2020,POP_2021,NAME",
`for` = "state:*",
key = census_key)
#request
response <- req_perform(request)
# check the response status to make sure it is successful
resp_status(response)
# Your code here
resp_content_type(response)
#population <- resp_body_json(response) |> do.call(what = rbind)
population <- resp_body_json(response, simplifyVector = TRUE)
head(population)
#| message: false
#| warning: false
library(tidyverse)
library(janitor)
population <- population |> row_to_names(row_number = 1) |>  # Use janitor row to names function
as_tibble() |>  # convert to tibble
select(-state) |>  # remove state column
rename(state_name = NAME) |>  # rename NAME column to state_name
pivot_longer(
cols = -state_name,
names_to = "year",
values_to = "population"
) |>  # use pivot_longer to tidy
mutate(year = str_sub(year, -4), # remove POP_ from year
# parse all relevant columns to numeric
year = as.integer(year),
population = as.numeric(population),
# add state abbreviations using state.abb variable
# use case_when to add abbreviations for DC and PR
state = case_when(state_name == "District of Columbia" ~ "DC",
state_name == "Puerto Rico" ~ "PR",
TRUE ~ state.abb[match(state_name, state.name)]))
population
population |>
# reorder state by the average population across the two years
# assign aesthetic mapping
ggplot(aes(x = population,
y = reorder(state_name, population))) +
geom_col() +  # use geom_col to plot barplot
facet_wrap(~ year) +  # facet by year
labs(
x = "Population",
y = "State",
title = "US State Populations in 2020 and 2021"
)
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
#| message: false
#| warning: false
library(jsonlite)
library(purrr)
url <- "https://github.com/datasciencelabs/2025/raw/refs/heads/main/data/regions.json"
regions_raw <- request(url) |>
req_perform() |>
resp_check_status() |>  # check the status; stop if not 200 (error)
resp_body_string() |>  # extract the response body as a JSON string
fromJSON(simplifyDataFrame = FALSE)  # use jsonlit JSON parser
#class(regions)
# convert list to data frame. You can use map_df in purrr package
regions <- regions_raw |>
map_df(function(x){
tibble(
state_name  = x$states,       # expand each state as a row
region      = x$region,
region_name = x$region_name
)
}) |>
# change the long name of region to short name
mutate(
region_name = case_when(
region_name == "New York and New Jersey, Puerto Rico, Virgin Islands" ~ "NY/NJ/PR/VI",
TRUE ~ region_name
)
) |>
# keep rows where state_name is one of the 50 U.S. states, District of Columbia, or Puerto Rico
filter(state_name %in% c(state.name, "District of Columbia", "Puerto Rico"))
#nrow(regions)
population <- population |>
left_join(regions, by = "state_name")
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases_raw <- request(api) |>
req_perform() |>
resp_check_status() |>  # check the API response status
resp_body_json(simplifyDataFrame = TRUE)
#cases_raw
nrow(cases_raw)
api <- "https://data.cdc.gov/resource/pwn4-m3yp.json"
cases <- request(api) |>
req_url_query(`$limit` = "10000000000") |>
req_perform() |>
resp_check_status() |>  # check the API response status
resp_body_json(simplifyDataFrame = TRUE) |>
select(state, end_date, new_cases) |>  # select columns `state`, `end_date`, and `new_cases`
rename(date = end_date,
cases = new_cases) |>  # rename column names
mutate(cases = as.numeric(cases),
date = as.Date(date))  # make sure the cases are numeric and the dates are in the `Date` ISO-8601
cases |>
filter(year(date) %in% c(2020, 2021)) |>  # keep only 2020 & 2021
mutate(year = year(date)) |>  # create a new column `year` by extracting year from `date`
left_join(population, by = c("state", "year")) |>  # join with `population` on both `state` and `year`
mutate(cases_per100k = (cases / population) * 100000) |>  # compute cases per 100,000 population
select(state, region_name, date, cases_per100k) |>  # select columns `state`, `region_name`, `date`, `cases_per100k`
filter(!is.na(state), !is.na(region_name), !is.na(date), !is.na(cases_per100k)) |>  # remove rows with missing values
ggplot(aes(x = date, y = cases_per100k, color = state)) +  # x-axis=date, y-axis=cases_per100k, color by state
geom_line() +  # draw lines for each state's time series
facet_wrap(~ region_name, ncol=2) +  # create separate panels for each region
labs(
title = "Weekly COVID-19 Cases per 100,000 by Region (2020–2021)",
x = "Date",
y = "Cases per 100,000"
)
library(lubridate)
library(knitr)
cases |>
mutate(date = ymd(date)) |>  # properly parse the `date` column
filter(year(date) %in% c(2020, 2021)) |>  # keep only 2020 & 2021
mutate(year = year(date), month = month(date, label=TRUE, abbr=FALSE)) |>  # full month name
select(year, month, cases) |>  # select columns `year`, `month`, and `cases`
group_by(year, month) |>  # group by `year` and `month`
# calculate the total number of cases for each year-month group (ignoring NAs)
summarise(total_cases = sum(cases, na.rm = TRUE),
.groups = "drop") |>  # drop all grouping
arrange(year, month) |>  # order by `year` and `month`
kable(caption = "Total COVID-19 Cases by Year and Month (2020–2021)")
deaths_url <- "https://data.cdc.gov/resource/9bhg-hcku.json"
# Your code here
deaths <- request(deaths_url) |>
req_url_query(`$limit` = "1000000000") |>
req_perform() |>
resp_check_status() |>  # check the API response status
resp_body_json(simplifyDataFrame = TRUE) |>
select(state, end_date, covid_19_deaths) |>  # select columns state, end_date, covid_19_deaths
rename(date = end_date, deaths = covid_19_deaths) |>  # rename columns
# ensure dates are in proper Date format and deaths are numeric
mutate(date = as.Date(date), deaths = as.numeric(deaths)) |>
# keep rows where state is one of the 50 U.S. states, District of Columbia, or Puerto Rico
filter(state %in% c(state.name, "District of Columbia", "Puerto Rico"))
#deaths
# Your code here
deaths |>
group_by(state) |>  # group by state
summarise(total_deaths = sum(deaths, na.rm = TRUE),  # compute the total number of cases for each state (ignoring NAs)
.groups = "drop") |>  # drop all groupings
slice_max(total_deaths, n = 10) |>  # select the top 10 states with the highest death counts
# reorder states so bars are sorted by death counts
ggplot(aes(x = total_deaths, y = reorder(state, total_deaths))) +
geom_col() +  # draw a bar chart (bars represent death counts)
labs(
title = "Top 10 States with Highest Total COVID-19 Deaths",
y = "State",
x = "Total Deaths"
)
